// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  hash      String

  firstName String?
  lastName  String?
  refreshToken String?

  bookmarks Bookmark[]

  folders Folder[]
  
  @@map("users")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String

  userId Int
  folderId Int?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@unique([id, userId])

  @@map("bookmarks")
}

model Folder {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  userId Int
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)

  parentId Int?
  parent    Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[]  @relation("FolderHierarchy")

  bookmarks Bookmark[]

  @@unique([userId,name])

  @@map("folders")
} 